name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    # 1. ソース取得
    - uses: actions/checkout@v4
      with:
        submodules: true

    # 2. Ninja を OS 別にインストール
    - name: Install Ninja (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build

    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      run: choco install -y ninja

    # 3. Windows: MSVC 環境 + Clang 17
    - name: Setup MSVC
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Setup Clang 17 (Windows)
      if: runner.os == 'Windows'
      uses: egor-tensin/setup-clang@v1
      with:
        version: 17

    - name: Install Ninja (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install -y ninja
        echo "C:\ProgramData\chocolatey\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append


    # 4. CMake Configure
    - name: Configure (CMake)
      shell: bash
      run: |
        EXTRA=""
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          EXTRA="-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/cmake/Toolchain-clang17.cmake"
        fi

        cmake -B build -G Ninja \
              -DPRISM_BUILD_TESTS=ON \
              -DPRISM_BUILD_SAMPLES=OFF \
              -DCMAKE_BUILD_TYPE=Release \
              ${EXTRA}

    # 5. Build
    - name: Build
      run: cmake --build build --parallel

    # 6. Test
    - name: Run tests
      run: ctest --test-dir build --output-on-failure
